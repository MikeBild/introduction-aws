type Query {
  articles(filter: ArticlesFilter): [Document]
  article(id: ID!, versionId: ID): Article
  userProfiles: [UserProfile]
}

# Represents articles filter conditions.
input ArticlesFilter {
  # Filter by latest article version ID.
  isLatest: Boolean
}

type Mutation {
  articleAdd(input: ArticleAddInput!): ArticleAddResult!
  articleUpdate(input: ArticleUpdateInput!): ArticleUpdateResult!
  articlePreview(input: ArticlePreviewInput!): ArticlePreviewResult!
}

# WIP! Represents variants of CMS documents.
type Document {
  id: ID
  # Contains the article version ID
  versionId: String
  modifiedAt: AWSDateTime
  # Is that the latest version of an article?
  isLatest: Boolean
  article: Article
}

type Article {
  id: ID!
  name: String @deprecated(reason: "Use userProfile field.")
  # Raw content field
  content: String
  userProfile: UserProfile
}

type UserProfile {
  id: ID!
  fullName: String
  name: String
  email: AWSEmail
}

input ArticleAddInput {
  name: String!
  content: String!
}

type ArticleAddResult {
  result: Article
  failure: Failure
}

input ArticleUpdateInput {
  id: ID!
  name: String!
  content: String!
}

type ArticleUpdateResult {
  result: Article
  failure: Failure
}

input ArticlePreviewInput {
  id: ID!
  versionId: String
}

type ArticlePreviewResult {
  result: Preview
  failure: Failure
}

type Preview {
  id: ID
  versionId: String
  content: String
  author: String
  url: AWSURL
  html: String
}

# Contains the human readable failure/error message.
type Failure {
  message: String
}

schema {
  query: Query
  mutation: Mutation
}
